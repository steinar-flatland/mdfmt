using Mdfmt.Generators.Links;
using Mdfmt.Model;

namespace Mdfmt.Updaters;

/// <summary>
/// Ensure that the in-document links are up to date according to a flavor of links generated by a link destination generator.
/// </summary>
/// <param name="linkDestinationGenerator">
/// Knows how to generate an in-document link destination according to a slugification flavor.
/// </param>
internal class InDocumentLinkUpdater(ILinkDestinationGenerator linkDestinationGenerator)
{
    private readonly ILinkDestinationGenerator _linkDestinationGenerator = linkDestinationGenerator;

    /// <summary>
    /// Ensure all the in-document links are up to date according to the <see cref="ILinkDestinationGenerator"/>
    /// owned by this <c>InDocumentLinkUpdater</c>.
    /// </summary>
    /// <param name="md">
    /// A Markdown file loaded into <see cref="MdStruct"/>.
    /// </param>
    /// <param name="verbose">
    /// Whether to generate verbose output.
    /// </param>
    public void Update(MdStruct md, bool verbose)
    {
        bool fileNameDisplayed = false;

        foreach (LinkRegion linkRegion in md.LinkRegions)
        {
            if (linkRegion.GetLinkType(md.FileName) == LinkType.InDocument)
            {
                if (md.TryGetHeadingRegion(linkRegion.Label, out HeadingRegion headingRegion) ||
                    md.TryGetHeadingRegion(linkRegion.Destination, out headingRegion))
                {
                    string destination = _linkDestinationGenerator.GenerateInDocumentLinkDestination(md.FileName, headingRegion.HeadingText);
                    if (linkRegion.Destination != destination)
                    {
                        linkRegion.Destination = destination;
                        if (verbose)
                        {
                            if (!fileNameDisplayed)
                            {
                                Output.Emphasis($"- {md.FilePath}: Updated in-document links:");
                                fileNameDisplayed = true;
                            }
                            Output.Emphasis($"  {linkRegion.Content}");
                        }
                    }
                }
                else
                {
                    Output.Warn($"{md.FilePath}: Could not match link to heading: {linkRegion.Content}");
                }
            }
        }
    }
}
