using Mdfmt.Generators.Links;
using Mdfmt.Model;

namespace Mdfmt.Updaters;

/// <summary>
/// Ensure that the in-document links are up to date according to a flavor of links generated by a link destination generator.
/// </summary>
/// <param name="linkDestinationGenerator">Knows how to generate an in-document link destination according to a slugification flavor</param>
internal class LinkUpdater(ILinkDestinationGenerator linkDestinationGenerator)
{
    private readonly ILinkDestinationGenerator _linkDestinationGenerator = linkDestinationGenerator;

    /// <summary>
    /// Ensure all the in-document links are up to date according to the <see cref="ILinkDestinationGenerator"/>
    /// owned by this <c>LinkUpdater</c>.
    /// </summary>
    /// <param name="md">
    /// A Markdown file loaded into <see cref="MdStruct"/>.
    /// </param>
    /// <param name="verbose">
    /// Whether to generate verbose output.
    /// </param>
    public void Update(MdStruct md, bool verbose)
    {
        foreach (LinkRegion linkRegion in md.LinkRegions)
        {
            bool linkIsWithinSameFile =
                string.IsNullOrWhiteSpace(linkRegion.Destination) ||
                linkRegion.Destination.StartsWith('#') ||
                linkRegion.Destination.StartsWith($"./{md.FileName}");
            if (linkIsWithinSameFile)
            {
                if (md.TryGetHeadingRegion(linkRegion.Label, out HeadingRegion headingRegion) ||
                    md.TryGetHeadingRegion(linkRegion.Destination, out headingRegion))
                {
                    string destination = _linkDestinationGenerator.GenerateLinkDestination(md.FileName, headingRegion.HeadingText);
                    if (linkRegion.Destination != destination)
                    {
                        linkRegion.Destination = destination;
                        if (verbose)
                        {
                            Output.Emphasis($"Updated link with label [{linkRegion.Label}] to target destination ({linkRegion.Destination})");
                        }
                    }
                }
                else
                {
                    Output.Warn($"{md.FilePath}: Could not match link to heading: {linkRegion.Content}");
                }
            }
        }
    }
}
